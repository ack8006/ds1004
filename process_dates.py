"""Process date columns.

This script takes a column of dates in a file generated by extract_columns.

Then it computes statistics:
    - Unique year, month, day, down to seconds (INPUT.year.csv, etc.)
    - List of strings that don't look like dates (INPUT.nondate.csv, etc.)
    Each output is comma-separated with counts of rows that follow the criteria.
"""

import sys
from __future__ import print_function
import re
from operator import add
from pyspark import SparkContext

raw = sys.argv[1]
min_partitions = int(sys.argv[2])

date_str = re.compile('(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)')

def matches_date(s):
    """Input: (string, count)
    Output: either
        (string, count) or
        ({year: '2015', month: '03', ...}, count)"""

    # Sample date: 2015-01-15 19:23:42
    string, count = s
    match = date_str.match(string)

    if not match:
        return s

    date = {
        'year': match.group(1),
        'month': match.group(2),
        'day': match.group(3),
        'hour': match.group(4),
        'minute': match.group(5),
        'seconds': match.group(6)
    }
    return (date, count)

def to_csv(s):
    return '{},{}'.format(s[0], s[1])

def process(sc, strs):
    """Input:
        SparkContext,
        RDD [ string, string, string ] , each string a date
    Output: None, but saves text files"""

    strs = lines.map(lambda l: (l, 1))
    counts = strs.reduceByKey(add)

    dates = counts.map(matches_date)
    invalids = dates.filter(lambda x: isinstance(x, str))
    valids = dates.filter(lambda x: not isinstance(x, str))

    dims = ['year', 'month', 'day', 'hour', 'minute', 'second']
    for d in dims:
        dimcount = valids.map(lambda (o, count): o[d], count)
        sums = dimcount.reduceByKey(add)
        sums.saveAsTextFile(raw + '.' + d + '.csv')

    invalids.map(to_csv).saveAsTextFile(raw + '.nondate.csv')

if __name__ == '__main__':
    sc = SparkContext()
    lines = sc.textFile(raw, minPartitions=min_partitions)

    process(sc, lines)

